package com.switek.netseed.server.io.socket;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.zip.Inflater;

import org.apache.mina.core.buffer.IoBuffer;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolDecoder;
import org.apache.mina.filter.codec.ProtocolDecoderOutput;

import com.switek.netseed.server.Utils;


public class MyDecoder implements ProtocolDecoder {

	public void decode(IoSession session, IoBuffer buffer, ProtocolDecoderOutput out)
			throws Exception {		
		System.out.println("MyDecoder, Thread: " + Thread.currentThread().getId() + session);
	
		ArrayList<Byte> dst = new ArrayList<>();
		
		while(buffer.hasRemaining()){
			dst.add(buffer.get());
		}

		System.out.println(Utils.bytes2HexString(dst));
		out.write(dst);
		
	}

	public void dispose(IoSession arg0) throws Exception {
		// TODO Auto-generated method stub

	}

	public void finishDecode(IoSession arg0, ProtocolDecoderOutput arg1)
			throws Exception {
		
	}
	
	public static String byteToHexString(byte[] bs){
		StringBuffer _hexValue = new StringBuffer();
		for(int i = 0;i < bs.length; i++){  
			int _val = ((int)bs[i]) & 0xff;
			if(_val < 16){
				_hexValue.append("0");
			}
			_hexValue.append(Integer.toHexString(_val)+" ");
			if(i > 0 && (i+1) % 8 == 0){
				_hexValue.append("\n");
			}
		}
		System.out.println(_hexValue.toString());
		return _hexValue.toString();
	}
	
	public static byte[] decompress(byte[] data) {
		byte[] output = new byte[0];

		Inflater decompresser = new Inflater(false);
		decompresser.reset();
		decompresser.setInput(data);

		ByteArrayOutputStream o = new ByteArrayOutputStream(data.length);
		try {
			byte[] buf = new byte[1024];
			while (!decompresser.finished()) {
				int i = decompresser.inflate(buf);
				o.write(buf, 0, i);
			}
			output = o.toByteArray();
		} catch (Exception e) {
			output = data;
			e.printStackTrace();
		} finally {
			try {
				o.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		decompresser.end();
		return output;
	}

}
